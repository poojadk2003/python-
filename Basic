#to print the factorial of the number
import math
def factorial(n):
    x=math.factorial(n)
    print(x)
factorial(4)

#to add all the numbers in the given tuples
def add(a,*b):
    c=a
    for i in b:
        c=c+i
    print(c)

add(3,2,5,6)

def person(name,**data):
    print(name)
    for i,j in data.items():
        print(i,j)
 
person("pooja",age=20,city='gadag',mob=1323456)

#to count the even and odd numbers in the given list
def count(list):
    even=0
    odd=0
    for i in list:
        if i%2==0:
            even+=1
        else:
            odd+=1
    return even,odd
list=[23,45,60,24,56]
even,odd=count(list)
print(even)
print(odd)

#to find the fibonacci of the number
def fibonacci(n):
    a=0
    b=1
    print(a)
    print(b)
    
    for i in range(2,n):
        c=a+b
        a=b
        b=c
        print(c)
fibonacci(10)
#using user input
def fibonacci():
    n=int(input("Enter the number"))
    a=0
    b=1
    if n<0:
        print('infinity')
    else:
        print(a)
        print(b)
    
    for i in range(2,n):
        c=a+b
        a=b
        b=c
        print(c)
fibonacci()

#to find the factorial of the number
import math
def facto():
    n=int(input("Enter the number"))
    x=math.factorial(n)
    print(x)
facto()
#using range function
def fact():
    f=1
    for i in range(1,n+1):
        f=f*i
    return f
n=int(input("Enter the number"))
result=fact()
print(result)

#using recursion
import sys
sys.setrecursionlimit(2000)
print(sys.getrecursionlimit())
i=0
def greet():
    i+=1
    print("hello",i)
    greet()
greet()

#factorial using recursion
def fact(n):
    if n==0:
        return 1
    else:
        return n*fact(n-1)
result=fact(5)
print(result)

#lambda using anonymous function:
**to add two numbers**
x=lambda a,b:a+b
r=x(2,5)
print(r)
**to find square of a number**
x=lambda a:a*a
r=x(5)
print(r)

# to find even nos in the list by using filter function:
n=[2,3,5,6,7,8,5,8,9]
evens=list(filter(lambda n:n%2==0,n))
print(evens)
**by using double and reduce function**
from functools import reduce
n=[2,3,5,6,7,8,5,8,9]
evens=list(filter(lambda n:n%2==0,n))
doubles=list(map(lambda n:n*2,evens))
sum=reduce(lambda a,b:a+b,doubles)
print(evens)
print(doubles)
print(sum)

#creation of class and object
class Computer:
    def __init__(self,key,mouse):
        self.key=key
        self.mouse=mouse
    def config(self):
        print("Config is",self.key,self.mouse)
com1=Computer('key1','mouse1')
com2=Computer('key2','mouse2')
com1.config()
com2.config()

#using constructor and updating the values and printing
class Computer:
    def __init__(self):
        self.name="pooja"
        self.age=21
    def num(self):
        print(self.name,self.age)
p1=Computer()
p2=Computer()
p1.name='shree'
p2.age=25
p1.num()
p2.num()


#using constructor,self and updating the values with the help of update function
class Computer:
    def __init__(self):
        self.name="pooja"
        self.age=24
    def update(self):
        self.age=30
c1=Computer()
c2=Computer()
c1.name='shree'
c1.update()
print(c1.name,c1.age)
print(c2.name,c2.age)

#using compare for two objects:
class Computer:
    def __init__(self):
        self.name="pooja"
        self.age=30
    def compare(self,obj2):
        if self.age==obj2.age:
            return true
        else:
            return false
obj1=Computer()
obj2=Computer()
obj1.age=45
if obj1==obj2:
    print('they r same')
else:
    print('they r diff')
    
print(obj1.age)
print(obj2.age)

#using class and instance variables:
class Car:
    wheels=4
    def __init__(self):
        self.mlg=10
        self.com="BMW"
        
c1=Car()
c2=Car()
c1.mlg=8
Car.wheels=5
print(c1.com,c1.mlg,c1.wheels)
print(c2.com,c2.mlg,c2.wheels)


#using class,instance,static methods:
class Student:
    school='srv'
    def __init__(self,m1,m2,m3):
        self.m1=m1
        self.m2=m2
        self.m3=m3
    def avg(self):
        return (self.m1+self.m2+self.m3)/3
    def get_m1(self):
        return self.m1
    def set_m1(self,value):
        self.m1=value
    @classmethod
    def info(cls):
        return cls.school
    @staticmethod
    def sink():
        print('this is a class')
s1=Student(2,3,4)
s2=Student(7,5,6)
print(s1.avg())
print(s2.avg())
print(Student.info())
Student.sink()

#using inner class:
class Student:
    def __init__(self,name,roll):
        self.name=name
        self.roll=roll
        self.lap=self.laptop()
    def show(self):
         print(self.name,self.roll)
         self.lap.show()
    class laptop:
        def __init__(self):
            self.brand='hp'
            self.cpu='i5'
            self.cost=20000
        def show(self):
            print(self.brand,self.cpu,self.cost)
s1=Student('pooja',2)
s2=Student('shree',3)
s1.show()

#Inheritance
**sigle inheritance**
class A:
    def feature1(self):
        print('feature1')
        
    def feature2(self):
        print('feature2')
class B(A):
    def feature3(self):
        print('feature3')
        
    def feature4(self):
        print('feature4')

b1=B()
b1.feature1()
b1.feature2()
b1.feature3()
b1.feature4()

**Multilevel inheritance**
class A:
    def feature1(self):
        print('feature1')
        
    def feature2(self):
        print('feature2')
class B(A):
    def feature3(self):
        print('feature3')
        
    def feature4(self):
        print('feature4')
class C(B):
    def feature5(self):
        print('feature5')

c1=C()
c1.feature1()
c1.feature2()
c1.feature3()
c1.feature4()
c1.feature5()

**multiple inheritance**
class A:
    def feature1(self):
        print('feature1')
        
    def feature2(self):
        print('feature2')
class B():
    def feature3(self):
        print('feature3')
        
    def feature4(self):
        print('feature4')
class C(A,B):
    def feature5(self):
        print('feature5')

c1=C()
c1.feature1()
c1.feature2()
c1.feature3()
c1.feature4()
c1.feature5()

#calling constructor of other cls with help of super inheritance
class A:
    def __init__(self):
        print('in A init')
    def feature1(self):
        print('feature1')
        
    def feature2(self):
        print('feature2')
class B(A):
    def __init__(self):
        super().__init__()
        print('in B init')
    def feature3(self):
        print('feature3')
        
    def feature4(self):
        print('feature4')

b1=B()

#using MRO and super()
class A:
    def __init__(self):
        print('in A init')
    def feature1(self):
        print('feature1')
        
    def feature2(self):
        print('feature2')
class B:
    def __init__(self):
        print('in B init')
    def feature3(self):
        print('feature3')
        
    def feature4(self):
        print('feature4')
class C(A,B):
    def __init__(self):
        super().__init__()
        print('in C init')
        def feature5(self):
            print('feature5')
b1=C()

#method overloading:class Student:
    def __init__(self,m1,m2):
        self.m1=m1
        self.m2=m2
    def sum(self,a=None,b=None,c=None):
        s=0
        if a!=None and b!=None and c!=None:
            s=a+b+c
        elif a!=None and b!=None:
            s=a+b
        else:
            s=a
        return s
s1=Student(45,67)
print(s1.sum(2))

#method overriding:
class A:
    def show(self):
        print('A in show')
        
class B(A):
    def show(self):
        print('B in show')
a1=B()
a1.show()

#using iteration and next functions:
class Top:
    def __init__(self):
        self.num=1
    def __iter__(self):
        return self
    def __next__(self):
        if self.num <=10:
            val=self.num
            self.num+=1
            return val
        else:
            raise StopIteration
values=Top()
for i in values:
    print(i)

#using Generator:


def topten():
    n=1
    while(n<=10):
        m=n*n
        yield m
        n+=1
values=topten()
for i in values:
    print(i)

#using exception handling:
a=5
b=2
try:
    print('resorce opened')
    print(a/b)
    k=int(input("enter a num:"))
    print(k)
except ZeroDivisionError as e:
    print('cannot divide a num by 0',e)
except ValueError as e:
    print('input invalid')
except Exception as e:
    print('somthing went wrong')
finally:
    print('resource closed')

#multithreading :
from time import sleep 
from threading import *

class Hello(Thread):
    def run(self):
        for i in range(5):
            print("hello")
            sleep(1)
            
class Hii(Thread):
    def run(self):
        for i in range(5):
            print("hi")
            sleep(1)
        
t1=Hello()
t2=Hii()
t1.start()
sleep(0.2)
t2.start()
t1.join()
t2.join()
print('bye')

#comments:
# is used tocomment for every line
'''   ''' is also used only for documnetation purpose

#python is both compiled and interpreted lang
source-code->compiled->byte-code->interpreter(using python virtual machine)->machine lang

#linear search in python:
pos=-1
def search(lst,n):
    i=0
    while i<len(lst):
        if lst[i]==n:
            globals()['pos']=i
            return True
        i=i+1
    return False
lst=[5,8,4,6,9,2]
n=9
if search(lst,n):
    print('found',pos+1)
else:
    print('not found')


#using for loop:
pos=-1
def search(lst,n):
    i=0
    for i in range(len(lst)):
        if lst[i]==n:
            globals()['pos']=i
            return True
     
    return False
lst=[5,8,4,6,9,2]
n=9
if search(lst,n):
    print('found',pos+1)
else:
    print('not found')


        






   


